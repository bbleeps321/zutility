/*
 * ZCalendar.java
 *
 * Main program for ZCalendar.
 *
 * Created on Feb 25, 2009, 7:55:38 PM by Carey Zhang
 */

package zcalendar;


import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import utilities.ZFileChooser;
import utilities.ZReadWrite;

/**
 *
 * @author Owner
 */
public class ZCalendar extends javax.swing.JFrame implements ActionListener
{
    private EventMap    eventMap;       // Map of Dates to associated Events.
    private EventDialog dialog;         // Dialog for editing events.

    /** Creates new form ZCalendar */
    public ZCalendar()
    {
        initComponents();
        calendar.addActionListener(this);

        // TODO: icon image
        setIconImage(Toolkit.getDefaultToolkit().createImage("zutility.gif"));

        eventMap = new EventMap();

        // for now, add dummy events
        Event[] events = {
            new Event(new Date(), "Today", "something"),
            new Event(new Date(new Date().getTime()+24*60*60*1000), "Tomorrow", "another something aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
            new Event(new Date(new Date().getTime()+3*24*60*60*1000), "Hello", "Hi!"),
            new Event(new Date(new Date().getTime()+7*24*60*60*1000), "Goodbye", "bye!")
        };
        for (Event e : events)
            eventMap.addEvent(e);

        refresh();
    }

    public void actionPerformed(ActionEvent e)
    {
        if (e.getSource() == calendar)
        {
            refresh();
        }
    }

    public EventMap getEventMap()
    {
        return eventMap;
    }

    public void switchTo(Date d)
    {
        calendar.setDate(d);
        eventDisplay.setEvent(currentEvent());
    }

    private Event currentEvent()
    {
        return eventMap.getEvent(calendar.getDate());
    }

    private void refresh()
    {
        // update display
        eventDisplay.setEvent(currentEvent());

        // update button states
        boolean eventExists = currentEvent() != null;
        editEventButton.setEnabled(eventExists);
//        newEventButton.setEnabled(!eventExists);    // always enabled?
        removeEventButton.setEnabled(eventExists);
//        loadButton.setEnabled(true);
//        saveButton.setEnabled(true);
    }

    private void saveEvents(File file)
    {
        PrintStream out = ZReadWrite.writer(file);
        ArrayList<Event> events = eventMap.toEventList();
        for (Event e : events)
        {
            e.write(out);
            out.println();  // skip a line
        }
        out.close();
    }

    private void loadEvents(File file)
    {
        // clear old
        eventMap.clear();
        
        Scanner in = ZReadWrite.reader(file);
        while (in.hasNextLine())
        {
            Event e = new Event();
            e.readEvent(in);
            eventMap.addEvent(e);

            if (in.hasNextLine())
                in.nextLine();  // skip line
        }
        in.close();
        
        // update
        refresh();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        editEventButton = new javax.swing.JButton();
        newEventButton = new javax.swing.JButton();
        removeEventButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        calendar = new zcalendar.CalendarComponent();
        eventDisplay = new zcalendar.EventDisplayComponent();

        setTitle("ZCalendar");
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridLayout(2, 0));

        jPanel2.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel1.setLayout(new java.awt.GridLayout(6, 1, 0, 10));
        jPanel1.add(jLabel1);

        editEventButton.setText("Edit");
        editEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEventButtonActionPerformed(evt);
            }
        });
        jPanel1.add(editEventButton);

        newEventButton.setText("Add");
        newEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEventButtonActionPerformed(evt);
            }
        });
        jPanel1.add(newEventButton);

        removeEventButton.setText("Remove");
        removeEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEventButtonActionPerformed(evt);
            }
        });
        jPanel1.add(removeEventButton);

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        jPanel1.add(loadButton);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveButton);

        jPanel2.add(jPanel1, java.awt.BorderLayout.LINE_END);
        jPanel2.add(calendar, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2);
        getContentPane().add(eventDisplay);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editEventButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editEventButtonActionPerformed
    {//GEN-HEADEREND:event_editEventButtonActionPerformed
        Event e = currentEvent();
        if (e == null)
            return;

        if (dialog == null)
        {
            dialog = new EventDialog(this);
            dialog.setLocationRelativeTo(this);
        }

        dialog.execEditEvent(e);
//        eventDisplay.update();
    }//GEN-LAST:event_editEventButtonActionPerformed

    private void removeEventButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeEventButtonActionPerformed
    {//GEN-HEADEREND:event_removeEventButtonActionPerformed
        Event e = currentEvent();
        if (e == null)
            return;

        // display dialog for confirmation
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to remove this event?", "Remove event?", JOptionPane.OK_CANCEL_OPTION);
        if (response != JOptionPane.OK_OPTION)  // only remove if user chose "ok"
            return;

        eventMap.removeEvent(e);
        eventDisplay.setEvent(null);
//        eventDisplay.update();
    }//GEN-LAST:event_removeEventButtonActionPerformed

    private void newEventButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newEventButtonActionPerformed
    {//GEN-HEADEREND:event_newEventButtonActionPerformed
        if (dialog == null)
        {
            dialog = new EventDialog(this);
            dialog.setLocationRelativeTo(this);
        }

        dialog.execNewEvent(calendar.getDate());
//        eventDisplay.update();
    }//GEN-LAST:event_newEventButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        // get file to save to
        ZFileChooser fc = new ZFileChooser(".zcal", "ZCalendar file (*.zcal)");
        File file = fc.execSaveFileChooser(this);
        if (file == null)  // error or user canceled
            return;

        // write
        saveEvents(file);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadButtonActionPerformed
    {//GEN-HEADEREND:event_loadButtonActionPerformed
        // get file to load from
        ZFileChooser fc = new ZFileChooser(".zcal", "ZCalendar file (*.zcal)");
        File file = fc.execOpenFileChooser(this);
        if (file == null)  // error or user canceled
            return;

        // write
        loadEvents(file);
    }//GEN-LAST:event_loadButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ZCalendar cal = new ZCalendar();
                cal.setVisible(true);
                cal.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                cal.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private zcalendar.CalendarComponent calendar;
    private javax.swing.JButton editEventButton;
    private zcalendar.EventDisplayComponent eventDisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton newEventButton;
    private javax.swing.JButton removeEventButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

}
